population_name = str_extract(label, "(?<=_11_3_)[^_]+(?:_[^_]+)*(?=_(No_)?TCC)"),
# Extracts 'No_TCC' or 'TCC'
metric_type = str_extract(label, "(No_TCC|TCC)"),
# Extracts everything after 'TCC_'
payment_type_amount = str_extract(label, "(?<=TCC_).*$"),
payment_type_amount = ifelse(is.na(payment_type_amount), "", payment_type_amount),
population_name = if_else(
population_name == "No",
NA,
str_replace(population_name, "_No", "")
),
housing_tenure = ifelse(
payment_type_amount != '',
paste(
'Mortgage Affordability with',
format_number(as.numeric(payment_type_amount)),
"Downpayment",
sep = ' '
),
payment_type
)
) |>
select(-payment_type_amount, -payment_type,-prop_less_than_five) |>
mutate(population_group = case_when(
str_detect(population_name, "Kids")~ "Household",
str_detect(population_name, "_" ) ~ "Age",
str_detect(population_name, "College") ~ "College",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Californians") ~ "Affordability for All Californians",
TRUE ~ "Ethnicity"
),
interest_rate = "5%")
data_2percent_fixed <- data |>
mutate(population_name = case_when(
str_detect(population_name, "^NoCollegeComp$") ~ "Non-College Graduate",
str_detect(population_name, "^CollegeComp$") ~ "College Graduate",
str_detect(population_name, "^NoKids$") ~ "Households without Children",
str_detect(population_name, "^Kids$") ~ "Households with Children",
str_detect(population_name, "18_34") ~ "Age 18-34",
str_detect(population_name, "35_54") ~ "Age 35-54",
str_detect(population_name, "55_on") ~ "Age 55 plus",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Hisp") ~ "Hispanic",
str_detect(population_name, "All") ~ "Affordability for All Californians",
TRUE ~ population_name
))
combined_df <- bind_rows(data_2percent_fixed, data_5percent_fixed, data_8percent)
write_csv(combined_df,"./combined.csv")
combined_df |>
count(interest_rate) |> View()
library(readr)
whole_sheet_2percent <- read_csv("Code/Contract/MetroSight/CompareAffordability/whole_sheet_2percent.csv")
View(whole_sheet_2percent)
library(readr)
whole_sheet_5percent <- read_csv("Code/Contract/MetroSight/CompareAffordability/whole_sheet_5percent.csv")
View(whole_sheet_5percent)
data <-  whole_sheet_2percent |>
filter(!is.na(prop_comfortable)) |>
#  mutate(
#   prop_comfortable = prop_comfortable / 100,
#   prop_okay = prop_okay / 100,
#   prop_just = prop_just / 100,
#   prop_difficult = prop_difficult / 100
# ) |>
mutate(
# Extracts everything before '_11_3_', accounting for multiple underscores
payment_type = str_extract(label, ".*(?=_11_3_)"),
# Extracts everything between '_11_3_' and 'No_TCC' or 'TCC', including numbers and underscores
population_name = str_extract(label, "(?<=_11_3_)[^_]+(?:_[^_]+)*(?=_(No_)?TCC)"),
# Extracts 'No_TCC' or 'TCC'
metric_type = str_extract(label, "(No_TCC|TCC)"),
# Extracts everything after 'TCC_'
payment_type_amount = str_extract(label, "(?<=TCC_).*$"),
payment_type_amount = ifelse(is.na(payment_type_amount), "", payment_type_amount),
population_name = if_else(
population_name == "No",
NA,
str_replace(population_name, "_No", "")
),
housing_tenure = ifelse(
payment_type_amount != '',
paste(
'Mortgage Affordability with',
format_number(as.numeric(payment_type_amount)),
"Downpayment",
sep = ' '
),
payment_type
)
) |>
select(-payment_type_amount, -payment_type,-prop_less_than_five) |>
mutate(population_group = case_when(
str_detect(population_name, "Kids")~ "Household",
str_detect(population_name, "_" ) ~ "Age",
str_detect(population_name, "College") ~ "College",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Californians") ~ "Affordability for All Californians",
TRUE ~ "Ethnicity"
),
interest_rate = "2%")
format_number <- function(number) {
suffix <- ifelse(abs(number) >= 1e6, "M", ifelse(abs(number) >= 1e3, "K", ""))
number <- ifelse(abs(number) >= 1e6, number / 1e6, ifelse(abs(number) >= 1e3, number / 1e3, number))
formatted_number <- paste0("$", format(number, big.mark = ",", scientific = FALSE), suffix)
return(formatted_number)
}
format_number(200000)
data <-  whole_sheet_2percent |>
filter(!is.na(prop_comfortable)) |>
#  mutate(
#   prop_comfortable = prop_comfortable / 100,
#   prop_okay = prop_okay / 100,
#   prop_just = prop_just / 100,
#   prop_difficult = prop_difficult / 100
# ) |>
mutate(
# Extracts everything before '_11_3_', accounting for multiple underscores
payment_type = str_extract(label, ".*(?=_11_3_)"),
# Extracts everything between '_11_3_' and 'No_TCC' or 'TCC', including numbers and underscores
population_name = str_extract(label, "(?<=_11_3_)[^_]+(?:_[^_]+)*(?=_(No_)?TCC)"),
# Extracts 'No_TCC' or 'TCC'
metric_type = str_extract(label, "(No_TCC|TCC)"),
# Extracts everything after 'TCC_'
payment_type_amount = str_extract(label, "(?<=TCC_).*$"),
payment_type_amount = ifelse(is.na(payment_type_amount), "", payment_type_amount),
population_name = if_else(
population_name == "No",
NA,
str_replace(population_name, "_No", "")
),
housing_tenure = ifelse(
payment_type_amount != '',
paste(
'Mortgage Affordability with',
format_number(as.numeric(payment_type_amount)),
"Downpayment",
sep = ' '
),
payment_type
)
) |>
select(-payment_type_amount, -payment_type,-prop_less_than_five) |>
mutate(population_group = case_when(
str_detect(population_name, "Kids")~ "Household",
str_detect(population_name, "_" ) ~ "Age",
str_detect(population_name, "College") ~ "College",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Californians") ~ "Affordability for All Californians",
TRUE ~ "Ethnicity"
),
interest_rate = "2%")
data_2percent_fixed <- data |>
mutate(population_name = case_when(
str_detect(population_name, "^NoCollegeComp$") ~ "Non-College Graduate",
str_detect(population_name, "^CollegeComp$") ~ "College Graduate",
str_detect(population_name, "^NoKids$") ~ "Households without Children",
str_detect(population_name, "^Kids$") ~ "Households with Children",
str_detect(population_name, "18_34") ~ "Age 18-34",
str_detect(population_name, "35_54") ~ "Age 35-54",
str_detect(population_name, "55_on") ~ "Age 55 plus",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Hisp") ~ "Hispanic",
str_detect(population_name, "All") ~ "Affordability for All Californians",
TRUE ~ population_name
))
data <-  whole_sheet_5percent |>
filter(!is.na(prop_comfortable)) |>
#  mutate(
#   prop_comfortable = prop_comfortable / 100,
#   prop_okay = prop_okay / 100,
#   prop_just = prop_just / 100,
#   prop_difficult = prop_difficult / 100
# ) |>
mutate(
# Extracts everything before '_11_3_', accounting for multiple underscores
payment_type = str_extract(label, ".*(?=_11_3_)"),
# Extracts everything between '_11_3_' and 'No_TCC' or 'TCC', including numbers and underscores
population_name = str_extract(label, "(?<=_11_3_)[^_]+(?:_[^_]+)*(?=_(No_)?TCC)"),
# Extracts 'No_TCC' or 'TCC'
metric_type = str_extract(label, "(No_TCC|TCC)"),
# Extracts everything after 'TCC_'
payment_type_amount = str_extract(label, "(?<=TCC_).*$"),
payment_type_amount = ifelse(is.na(payment_type_amount), "", payment_type_amount),
population_name = if_else(
population_name == "No",
NA,
str_replace(population_name, "_No", "")
),
housing_tenure = ifelse(
payment_type_amount != '',
paste(
'Mortgage Affordability with',
format_number(as.numeric(payment_type_amount)),
"Downpayment",
sep = ' '
),
payment_type
)
) |>
select(-payment_type_amount, -payment_type,-prop_less_than_five) |>
mutate(population_group = case_when(
str_detect(population_name, "Kids")~ "Household",
str_detect(population_name, "_" ) ~ "Age",
str_detect(population_name, "College") ~ "College",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Californians") ~ "Affordability for All Californians",
TRUE ~ "Ethnicity"
),
interest_rate = "5%")
data_5percent_fixed <- data |>
mutate(population_name = case_when(
str_detect(population_name, "^NoCollegeComp$") ~ "Non-College Graduate",
str_detect(population_name, "^CollegeComp$") ~ "College Graduate",
str_detect(population_name, "^NoKids$") ~ "Households without Children",
str_detect(population_name, "^Kids$") ~ "Households with Children",
str_detect(population_name, "18_34") ~ "Age 18-34",
str_detect(population_name, "35_54") ~ "Age 35-54",
str_detect(population_name, "55_on") ~ "Age 55 plus",
is.na(population_name) ~ "NaiveAll",
str_detect(population_name, "Hisp") ~ "Hispanic",
str_detect(population_name, "All") ~ "Affordability for All Californians",
TRUE ~ population_name
))
library(readr)
data_8percent <- read_csv("Code/Contract/MetroSight/CompareAffordability/data_8percent.csv")
View(data_8percent)
combined_df <- bind_rows(data_2percent_fixed, data_5percent_fixed, data_8percent)
write_csv(combined_df,"./combined.csv")
library(tidyverse)
theme_set(theme_minimal())
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
original_data |>
filter(airport == "LAX") |>
group_by(category) |>
summarize(total_count = sum(as.numeric(count))) |>
arrange(desc(total_count))
View(original_data)
original_data |>
filter(airport == "LAX") |>
group_by(category) |>
summarize(total_count = sum(as.numeric(count))) |>
arrange(desc(total_count)) |> View()
```{r}
original_data |>
group_by(airport) |>
summarize(total_count = sum(as.numeric(count))) |>
ungroup() |>
arrange(desc(total_count)) |>
head(100) |> View()
ggplot(aes(x = total_count, y = reorder(airport, total_count))) +
geom_col() +  # Use geom_col() to create horizontal bars
labs(x = "Total Count", y = "Airport") +  # Add labels for axes
ggtitle("Total Count by Airport") +  # Add title
theme(legend.position = "none")
original_data |>
group_by(airport) |>
summarize(total_count = sum(as.numeric(count))) |>
ungroup() |>
arrange(desc(total_count)) |>
head(20) |>
ggplot(aes(x = total_count, y = reorder(airport, total_count))) +
geom_col() +  # Use geom_col() to create horizontal bars
labs(x = "Total Count", y = "Airport") +  # Add labels for axes
ggtitle("Total Count by Airport") +  # Add title
theme(legend.position = "none")
original_data |>
filter(airport == "LAX") |>
group_by(category) |>
summarize(total_count = sum(as.numeric(count))) |>
arrange(desc(total_count)) |> View()
original_data |>
filter(airport == "ORD") |>
group_by(category, subcategory) |>
summarize(total_count = sum(as.numeric(count))) |>
arrange(desc(total_count)) |>
View()
original_data |>
filter(airport == "ORD") |>
group_by(category) |>
summarize(total_count = sum(as.numeric(count))) |>
arrange(desc(total_count)) |> View()
View(real_data)
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
library(tidyverse)
theme_set(theme_minimal())
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
View(original_data)
library(tidyverse)
library(readr)
data <- read_csv("Downloads/data.csv")
View(data)
head(data)
View(data)
```{r}
data |>
filter(playerFullName=="DJ LeMahieu")
data |>
filter(playerFullName=="DJ LeMahieu") |>
ggplot(data, aes(x = PA, y = opponent)) +
geom_point()
data |>
filter(playerFullName=="DJ LeMahieu") |>
ggplot( aes(x = PA, y = opponent)) +
geom_point()
theme_set(theme_minimal())
library(tidyverse)
theme_set(theme_minimal())
data |>
filter(playerFullName=="DJ LeMahieu") |>
ggplot( aes(x = opponent, y = PA)) +
geom_point()
data |>
filter(playerFullName=="DJ LeMahieu") |>
ggplot( aes(x = opponent, y = PA)) +
geom_point()
```{r fig.width = 10}
data |>
filter(playerFullName=="DJ LeMahieu") |>
ggplot( aes(x = opponent, y = PA)) +
geom_point()
data |>
filter(playerFullName=="DJ LeMahieu") |>
filter(opponent=== "CLE")
data |>
filter(playerFullName=="DJ LeMahieu") |>
filter(opponent== "CLE")
data |>
filter(playerFullName == "DJ LeMahieu", opponent == "CLE")
data |>
filter(playerFullName == "DJ LeMahieu", opponent == "CLE") |>
View()
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
library(tidyverse)
theme_set(theme_minimal())
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
library(tidyverse)
theme_set(theme_minimal())
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
library(tidyverse)
theme_set(theme_minimal())
original_data <- read_csv('https://raw.githubusercontent.com/data-liberation-project/tsa-complaint-counts/main/output/03-standardized/complaints-by-subcategory.csv') |>  filter(!is.na(airport))
View(original_data)
data <- EducationDataPortal_04_14_2024_Schools |>
mutate(teacher_student_ratio = enrollment/teachers_fte)
library(tidyverse)
theme_set(theme_minimal())
library(readr)
data <- read_csv("Code/Code/HighSchool/data.csv")
View(data)
library(readr)
countypres_2000_2020 <- read_csv("Code/React/hello-vite-three/public/countypres_2000-2020.csv")
View(countypres_2000_2020)
library(tidyverse)
View(countypres_2000_2020)
countypres_2000_2020 |>
count(mode)
countypres_2000_2020 |>
count(mode) |> View()
countypres_2000_2020 |>
count(office) |> View()
countypres_2000_2020 |>
count(mode) |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL')
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(county_name)|>
mutate(max_candidatevotes = max(candidatevotes)) |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
top_n(1, candidatevotes) |>
ungroup()  |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
top_n(1, candidatevotes) |>
ungroup()  |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(county_name) %>%
top_n(1, candidatevotes) |>
ungroup()  |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,version) %>%
top_n(1, candidatevotes) |>
ungroup()  |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,version) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |> View()
countypres_2000_2020 |>
filter(mode == 'TOTAL')  View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
View()
countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,version) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |> View()
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,version) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |> View()
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,version) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()
data |> count(version)
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
select(-version,-mode)
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
select(-version,-mode)
View(data)
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
select(-version,-mode,-county_fips)
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
mutate(votes_percentage = candidatevotes/totalvotes) |>
select(-version,-mode,-county_fips,-office)
setwd("~/Code/React/hello-vite-three/public")
write_csv(data,'./data.csv')
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
mutate(
votes_percentage = candidatevotes/totalvotes,
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office)
View(data)
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
mutate(
votes_percentage = candidatevotes/totalvotes,
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office)
write_csv(data,'./data.csv')
data <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
mutate(max_candidatevotes = max(candidatevotes)) |>
# mutate(winning_party = party[which.max(candidatevotes)])|>
ungroup()  |>
mutate(
votes_percentage = candidatevotes/totalvotes,
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office)
View(data)
dataset <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
top_n(1,candidatevotes)|>
ungroup()  |>
mutate(
votes_percentage = candidatevotes/totalvotes,
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office)
View(dataset)
View(data)
dataset <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
top_n(1,candidatevotes)|>
ungroup()  |>
mutate(
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office)
write_csv(dataset,'./JustWinningParty.csv')
dataset <- countypres_2000_2020 |>
filter(mode == 'TOTAL') |>
group_by(state,county_name,year) |>
top_n(1,candidatevotes)|>
ungroup()  |>
mutate(
county_name = str_to_title(county_name)
) |>
select(-version,-mode,-office,-totalvotes)
write_csv(dataset,'./JustWinningParty.csv')
View(dataset)
